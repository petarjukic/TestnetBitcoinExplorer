{"ast":null,"code":"/**\n * Module dependencies.\n */\n\nconst _ = require('lodash');\nconst Parser = require('./parser');\nconst Requester = require('./requester');\nconst debugnyan = require('debugnyan');\nconst methods = require('./methods');\nconst requestLogger = require('./logging/request-logger');\nconst semver = require('semver');\n\n/**\n * List of networks and their default port mapping.\n */\n\nconst networks = {\n  mainnet: 8332,\n  regtest: 18332,\n  testnet: 18332\n};\n\n/**\n * Promisify helper.\n */\n\nconst promisify = fn => function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return new Promise((resolve, reject) => {\n    fn(...args, (error, value) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n      resolve(value);\n    });\n  });\n};\n\n/**\n * Constructor.\n */\n\nclass Client {\n  constructor() {\n    let {\n      agentOptions,\n      allowDefaultWallet = false,\n      headers = false,\n      host = 'localhost',\n      logger = debugnyan('bitcoin-core'),\n      network = 'mainnet',\n      password,\n      port,\n      ssl = false,\n      timeout = 30000,\n      username,\n      version,\n      wallet\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!_.has(networks, network)) {\n      throw new Error(`Invalid network name \"${network}\"`, {\n        network\n      });\n    }\n    this.agentOptions = agentOptions;\n    this.allowDefaultWallet = allowDefaultWallet;\n    this.auth = (password || username) && {\n      pass: password,\n      user: username\n    };\n    this.hasNamedParametersSupport = false;\n    this.headers = headers;\n    this.host = host;\n    this.password = password;\n    this.port = port || networks[network];\n    this.ssl = {\n      enabled: _.get(ssl, 'enabled', ssl),\n      strict: _.get(ssl, 'strict', _.get(ssl, 'enabled', ssl))\n    };\n    this.timeout = timeout;\n    this.wallet = wallet;\n\n    // Version handling.\n    if (version) {\n      // Capture X.Y.Z when X.Y.Z.A is passed to support oddly formatted Bitcoin Core\n      // versions such as 0.15.0.1.\n      const result = /[0-9]+\\.[0-9]+\\.[0-9]+/.exec(version);\n      if (!result) {\n        throw new Error(`Invalid Version \"${version}\"`, {\n          version\n        });\n      }\n      [version] = result;\n      this.hasNamedParametersSupport = semver.satisfies(version, '>=0.14.0');\n    }\n    this.version = version;\n    this.methods = _.transform(methods, (result, method, name) => {\n      result[_.toLower(name)] = {\n        features: _.transform(method.features, (result, constraint, name) => {\n          result[name] = {\n            supported: version ? semver.satisfies(version, constraint) : true\n          };\n        }, {}),\n        supported: version ? semver.satisfies(version, method.version) : true\n      };\n    }, {});\n    const request = requestLogger(logger);\n    this.request = request.defaults({\n      agentOptions: this.agentOptions,\n      baseUrl: `${this.ssl.enabled ? 'https' : 'http'}://${this.host}:${this.port}`,\n      strictSSL: this.ssl.strict,\n      timeout: this.timeout\n    });\n    this.request.getAsync = promisify(this.request.get);\n    this.request.postAsync = promisify(this.request.post);\n    this.requester = new Requester({\n      methods: this.methods,\n      version\n    });\n    this.parser = new Parser({\n      headers: this.headers\n    });\n  }\n\n  /**\n   * Execute `rpc` command.\n   */\n\n  async command() {\n    let body;\n    let multiwallet;\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    let [input, ...parameters] = args; // eslint-disable-line prefer-const\n    const isBatch = Array.isArray(input);\n    if (isBatch) {\n      multiwallet = _.some(input, command => {\n        return _.get(this.methods[command.method], 'features.multiwallet.supported', false) === true;\n      });\n      body = input.map((method, index) => this.requester.prepare({\n        method: method.method,\n        parameters: method.parameters,\n        suffix: index\n      }));\n    } else {\n      if (this.hasNamedParametersSupport && parameters.length === 1 && _.isPlainObject(parameters[0])) {\n        parameters = parameters[0];\n      }\n      multiwallet = _.get(this.methods[input], 'features.multiwallet.supported', false) === true;\n      body = this.requester.prepare({\n        method: input,\n        parameters\n      });\n    }\n    let uri = '/';\n    if (multiwallet && this.wallet) {\n      uri = `/wallet/${this.wallet}`;\n    } else if (multiwallet && !this.wallet && this.allowDefaultWallet) {\n      uri = '/wallet/';\n    }\n    return this.parser.rpc(await this.request.postAsync({\n      auth: _.pickBy(this.auth, _.identity),\n      body: JSON.stringify(body),\n      uri\n    }));\n  }\n\n  /**\n   * Given a transaction hash, returns a transaction in binary, hex-encoded binary, or JSON formats.\n   */\n\n  async getTransactionByHash(hash) {\n    let {\n      extension = 'json'\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.parser.rest(extension, await this.request.getAsync({\n      encoding: extension === 'bin' ? null : undefined,\n      url: `/rest/tx/${hash}.${extension}`\n    }));\n  }\n\n  /**\n   * Given a block hash, returns a block, in binary, hex-encoded binary or JSON formats.\n   * With `summary` set to `false`, the JSON response will only contain the transaction\n   * hash instead of the complete transaction details. The option only affects the JSON response.\n   */\n\n  async getBlockByHash(hash) {\n    let {\n      summary = false,\n      extension = 'json'\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const encoding = extension === 'bin' ? null : undefined;\n    const url = `/rest/block${summary ? '/notxdetails/' : '/'}${hash}.${extension}`;\n    return this.parser.rest(extension, await this.request.getAsync({\n      encoding,\n      url\n    }));\n  }\n\n  /**\n   * Given a block hash, returns amount of blockheaders in upward direction.\n   */\n\n  async getBlockHeadersByHash(hash, count) {\n    let {\n      extension = 'json'\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const encoding = extension === 'bin' ? null : undefined;\n    const url = `/rest/headers/${count}/${hash}.${extension}`;\n    return this.parser.rest(extension, await this.request.getAsync({\n      encoding,\n      url\n    }));\n  }\n\n  /**\n   * Returns various state info regarding block chain processing.\n   * Only supports JSON as output format.\n   */\n\n  async getBlockchainInformation() {\n    return this.parser.rest('json', await this.request.getAsync(`/rest/chaininfo.json`));\n  }\n\n  /**\n   * Query unspent transaction outputs for a given set of outpoints.\n   * See BIP64 for input and output serialisation:\n   * \t - https://github.com/bitcoin/bips/blob/master/bip-0064.mediawiki\n   */\n\n  async getUnspentTransactionOutputs(outpoints) {\n    let {\n      extension = 'json'\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const encoding = extension === 'bin' ? null : undefined;\n    const sets = _.flatten([outpoints]).map(outpoint => {\n      return `${outpoint.id}-${outpoint.index}`;\n    }).join('/');\n    const url = `/rest/getutxos/checkmempool/${sets}.${extension}`;\n    return this.parser.rest(extension, await this.request.getAsync({\n      encoding,\n      url\n    }));\n  }\n\n  /**\n   * Returns transactions in the transaction memory pool.\n   * Only supports JSON as output format.\n   */\n\n  async getMemoryPoolContent() {\n    return this.parser.rest('json', await this.request.getAsync('/rest/mempool/contents.json'));\n  }\n\n  /**\n   * Returns various information about the transaction memory pool.\n   * Only supports JSON as output format.\n   *\n   *   - size: the number of transactions in the transaction memory pool.\n   *   - bytes: size of the transaction memory pool in bytes.\n   *   - usage: total transaction memory pool memory usage.\n   */\n\n  async getMemoryPoolInformation() {\n    return this.parser.rest('json', await this.request.getAsync('/rest/mempool/info.json'));\n  }\n}\n\n/**\n * Add all known RPC methods.\n */\n\n_.forOwn(methods, (options, method) => {\n  Client.prototype[method] = _.partial(Client.prototype.command, method.toLowerCase());\n});\n\n/**\n * Export Client class.\n */\n\nmodule.exports = Client;","map":{"version":3,"names":["_","require","Parser","Requester","debugnyan","methods","requestLogger","semver","networks","mainnet","regtest","testnet","promisify","fn","args","Promise","resolve","reject","error","value","Client","constructor","agentOptions","allowDefaultWallet","headers","host","logger","network","password","port","ssl","timeout","username","version","wallet","has","Error","auth","pass","user","hasNamedParametersSupport","enabled","get","strict","result","exec","satisfies","transform","method","name","toLower","features","constraint","supported","request","defaults","baseUrl","strictSSL","getAsync","postAsync","post","requester","parser","command","body","multiwallet","input","parameters","isBatch","Array","isArray","some","map","index","prepare","suffix","length","isPlainObject","uri","rpc","pickBy","identity","JSON","stringify","getTransactionByHash","hash","extension","rest","encoding","undefined","url","getBlockByHash","summary","getBlockHeadersByHash","count","getBlockchainInformation","getUnspentTransactionOutputs","outpoints","sets","flatten","outpoint","id","join","getMemoryPoolContent","getMemoryPoolInformation","forOwn","options","prototype","partial","toLowerCase","module","exports"],"sources":["/Users/petarjukic/Documents/Kriptovalute/Projekt/BlockExplorer/block_explorer/node_modules/bitcoin-core/src/index.js"],"sourcesContent":["\n/**\n * Module dependencies.\n */\n\nconst _ = require('lodash');\nconst Parser = require('./parser');\nconst Requester = require('./requester');\nconst debugnyan = require('debugnyan');\nconst methods = require('./methods');\nconst requestLogger = require('./logging/request-logger');\nconst semver = require('semver');\n\n/**\n * List of networks and their default port mapping.\n */\n\nconst networks = {\n  mainnet: 8332,\n  regtest: 18332,\n  testnet: 18332\n};\n\n/**\n * Promisify helper.\n */\n\nconst promisify = fn => (...args) => new Promise((resolve, reject) => {\n  fn(...args, (error, value) => {\n    if (error) {\n      reject(error);\n\n      return;\n    }\n\n    resolve(value);\n  });\n});\n\n/**\n * Constructor.\n */\n\nclass Client {\n  constructor({\n    agentOptions,\n    allowDefaultWallet = false,\n    headers = false,\n    host = 'localhost',\n    logger = debugnyan('bitcoin-core'),\n    network = 'mainnet',\n    password,\n    port,\n    ssl = false,\n    timeout = 30000,\n    username,\n    version,\n    wallet\n  } = {}) {\n    if (!_.has(networks, network)) {\n      throw new Error(`Invalid network name \"${network}\"`, { network });\n    }\n\n    this.agentOptions = agentOptions;\n    this.allowDefaultWallet = allowDefaultWallet;\n    this.auth = (password || username) && { pass: password, user: username };\n    this.hasNamedParametersSupport = false;\n    this.headers = headers;\n    this.host = host;\n    this.password = password;\n    this.port = port || networks[network];\n    this.ssl = {\n      enabled: _.get(ssl, 'enabled', ssl),\n      strict: _.get(ssl, 'strict', _.get(ssl, 'enabled', ssl))\n    };\n    this.timeout = timeout;\n    this.wallet = wallet;\n\n    // Version handling.\n    if (version) {\n      // Capture X.Y.Z when X.Y.Z.A is passed to support oddly formatted Bitcoin Core\n      // versions such as 0.15.0.1.\n      const result = /[0-9]+\\.[0-9]+\\.[0-9]+/.exec(version);\n\n      if (!result) {\n        throw new Error(`Invalid Version \"${version}\"`, { version });\n      }\n\n      [version] = result;\n\n      this.hasNamedParametersSupport = semver.satisfies(version, '>=0.14.0');\n    }\n\n    this.version = version;\n    this.methods = _.transform(methods, (result, method, name) => {\n      result[_.toLower(name)] = {\n        features: _.transform(method.features, (result, constraint, name) => {\n          result[name] = {\n            supported: version ? semver.satisfies(version, constraint) : true\n          };\n        }, {}),\n        supported: version ? semver.satisfies(version, method.version) : true\n      };\n    }, {});\n\n    const request = requestLogger(logger);\n\n    this.request = request.defaults({\n      agentOptions: this.agentOptions,\n      baseUrl: `${this.ssl.enabled ? 'https' : 'http'}://${this.host}:${this.port}`,\n      strictSSL: this.ssl.strict,\n      timeout: this.timeout\n    });\n    this.request.getAsync = promisify(this.request.get);\n    this.request.postAsync = promisify(this.request.post);\n    this.requester = new Requester({ methods: this.methods, version });\n    this.parser = new Parser({ headers: this.headers });\n  }\n\n  /**\n   * Execute `rpc` command.\n   */\n\n  async command(...args) {\n    let body;\n    let multiwallet;\n    let [input, ...parameters] = args; // eslint-disable-line prefer-const\n    const isBatch = Array.isArray(input);\n\n    if (isBatch) {\n      multiwallet = _.some(input, command => {\n        return _.get(this.methods[command.method], 'features.multiwallet.supported', false) === true;\n      });\n\n      body = input.map((method, index) => this.requester.prepare({\n        method: method.method,\n        parameters: method.parameters,\n        suffix: index\n      }));\n    } else {\n      if (this.hasNamedParametersSupport && parameters.length === 1 && _.isPlainObject(parameters[0])) {\n        parameters = parameters[0];\n      }\n\n      multiwallet = _.get(this.methods[input], 'features.multiwallet.supported', false) === true;\n      body = this.requester.prepare({ method: input, parameters });\n    }\n\n    let uri = '/';\n\n    if (multiwallet && this.wallet) {\n      uri = `/wallet/${this.wallet}`;\n    } else if (multiwallet && !this.wallet && this.allowDefaultWallet) {\n      uri = '/wallet/';\n    }\n\n    return this.parser.rpc(await this.request.postAsync({\n      auth: _.pickBy(this.auth, _.identity),\n      body: JSON.stringify(body),\n      uri\n    }));\n  }\n\n  /**\n   * Given a transaction hash, returns a transaction in binary, hex-encoded binary, or JSON formats.\n   */\n\n  async getTransactionByHash(hash, { extension = 'json' } = {}) {\n    return this.parser.rest(extension, await this.request.getAsync({\n      encoding: extension === 'bin' ? null : undefined,\n      url: `/rest/tx/${hash}.${extension}`\n    }));\n  }\n\n  /**\n   * Given a block hash, returns a block, in binary, hex-encoded binary or JSON formats.\n   * With `summary` set to `false`, the JSON response will only contain the transaction\n   * hash instead of the complete transaction details. The option only affects the JSON response.\n   */\n\n  async getBlockByHash(hash, { summary = false, extension = 'json' } = {}) {\n    const encoding = extension === 'bin' ? null : undefined;\n    const url = `/rest/block${summary ? '/notxdetails/' : '/'}${hash}.${extension}`;\n\n    return this.parser.rest(extension, await this.request.getAsync({ encoding, url }));\n  }\n\n  /**\n   * Given a block hash, returns amount of blockheaders in upward direction.\n   */\n\n  async getBlockHeadersByHash(hash, count, { extension = 'json' } = {}) {\n    const encoding = extension === 'bin' ? null : undefined;\n    const url = `/rest/headers/${count}/${hash}.${extension}`;\n\n    return this.parser.rest(extension, await this.request.getAsync({ encoding, url }));\n  }\n\n  /**\n   * Returns various state info regarding block chain processing.\n   * Only supports JSON as output format.\n   */\n\n  async getBlockchainInformation() {\n    return this.parser.rest('json', await this.request.getAsync(`/rest/chaininfo.json`));\n  }\n\n  /**\n   * Query unspent transaction outputs for a given set of outpoints.\n   * See BIP64 for input and output serialisation:\n   * \t - https://github.com/bitcoin/bips/blob/master/bip-0064.mediawiki\n   */\n\n  async getUnspentTransactionOutputs(outpoints, { extension = 'json' } = {}) {\n    const encoding = extension === 'bin' ? null : undefined;\n    const sets = _.flatten([outpoints]).map(outpoint => {\n      return `${outpoint.id}-${outpoint.index}`;\n    }).join('/');\n    const url = `/rest/getutxos/checkmempool/${sets}.${extension}`;\n\n    return this.parser.rest(extension, await this.request.getAsync({ encoding, url }));\n  }\n\n  /**\n   * Returns transactions in the transaction memory pool.\n   * Only supports JSON as output format.\n   */\n\n  async getMemoryPoolContent() {\n    return this.parser.rest('json', await this.request.getAsync('/rest/mempool/contents.json'));\n  }\n\n  /**\n   * Returns various information about the transaction memory pool.\n   * Only supports JSON as output format.\n   *\n   *   - size: the number of transactions in the transaction memory pool.\n   *   - bytes: size of the transaction memory pool in bytes.\n   *   - usage: total transaction memory pool memory usage.\n   */\n\n  async getMemoryPoolInformation() {\n    return this.parser.rest('json', await this.request.getAsync('/rest/mempool/info.json'));\n  }\n}\n\n/**\n * Add all known RPC methods.\n */\n\n_.forOwn(methods, (options, method) => {\n  Client.prototype[method] = _.partial(Client.prototype.command, method.toLowerCase());\n});\n\n/**\n * Export Client class.\n */\n\nmodule.exports = Client;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}