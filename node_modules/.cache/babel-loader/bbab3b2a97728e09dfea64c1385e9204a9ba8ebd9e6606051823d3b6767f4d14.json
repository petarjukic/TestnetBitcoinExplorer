{"ast":null,"code":"/**\n * Module dependencies.\n */\n\nconst _ = require('lodash');\nconst methods = require('../methods');\n\n/**\n * Map all methods to lowercase.\n */\n\nconst lowercaseMethods = _.mapKeys(methods, (value, key) => key.toLowerCase());\n\n/**\n * Helper.\n */\n\nconst isJSON = data => {\n  try {\n    JSON.parse(data);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Obfuscate the response body.\n */\n\nfunction obfuscateResponseBody(body, method) {\n  const fn = _.get(lowercaseMethods[method], 'obfuscate.response');\n  if (!fn || _.isEmpty(body.result)) {\n    return body;\n  }\n  return _.defaults({\n    result: fn(body.result)\n  }, body);\n}\n\n/**\n * Obfuscate the response.\n */\n\nfunction obfuscateResponse(request, instance) {\n  if (request.type !== 'response') {\n    return;\n  }\n  if (!request.body) {\n    return;\n  }\n  if (_.get(request, `headers['content-type']`) === 'application/octet-stream') {\n    request.body = '******';\n    return;\n  }\n  if (!instance.body) {\n    return;\n  }\n  if (!isJSON(request.body)) {\n    return;\n  }\n  request.body = JSON.parse(request.body);\n  const requestBody = JSON.parse(instance.body);\n  if (Array.isArray(request.body)) {\n    const methodsById = _.mapKeys(requestBody, method => method.id);\n    request.body = _.map(request.body, request => obfuscateResponseBody(request, methodsById[request.id].method));\n  } else {\n    request.body = obfuscateResponseBody(request.body, requestBody.method);\n  }\n  request.body = JSON.stringify(request.body);\n}\n\n/**\n * Obfuscate the request body.\n */\n\nfunction obfuscateRequestBody(body) {\n  const method = _.get(lowercaseMethods[body.method], 'obfuscate.request');\n  if (!method) {\n    return body;\n  }\n  if (_.isPlainObject(body.params)) {\n    return _.assign(body, {\n      params: method.named(body.params)\n    });\n  }\n  return _.assign(body, {\n    params: method.default(body.params)\n  });\n}\n\n/**\n * Obfuscate the request.\n */\n\nfunction obfuscateRequest(request) {\n  if (request.type !== 'request') {\n    return;\n  }\n  if (!_.isString(request.body)) {\n    return;\n  }\n  request.body = JSON.parse(request.body);\n  if (Array.isArray(request.body)) {\n    request.body = _.map(request.body, obfuscateRequestBody);\n  } else {\n    request.body = obfuscateRequestBody(request.body);\n  }\n  request.body = JSON.stringify(request.body);\n}\n\n/**\n * Obfuscate headers.\n */\n\nfunction obfuscateHeaders(request) {\n  if (request.type !== 'request') {\n    return;\n  }\n  if (!_.has(request, 'headers.authorization')) {\n    return;\n  }\n  request.headers.authorization = request.headers.authorization.replace(/(Basic )(.*)/, `$1******`);\n}\n\n/**\n * Export `RequestObfuscator`.\n */\n\nmodule.exports = {\n  obfuscate: (request, instance) => {\n    obfuscateHeaders(request);\n    obfuscateRequest(request);\n    obfuscateResponse(request, instance);\n  }\n};","map":{"version":3,"names":["_","require","methods","lowercaseMethods","mapKeys","value","key","toLowerCase","isJSON","data","JSON","parse","e","obfuscateResponseBody","body","method","fn","get","isEmpty","result","defaults","obfuscateResponse","request","instance","type","requestBody","Array","isArray","methodsById","id","map","stringify","obfuscateRequestBody","isPlainObject","params","assign","named","default","obfuscateRequest","isString","obfuscateHeaders","has","headers","authorization","replace","module","exports","obfuscate"],"sources":["/Users/petarjukic/Documents/Kriptovalute/Projekt/BlockExplorer/block_explorer/node_modules/bitcoin-core/src/logging/request-obfuscator.js"],"sourcesContent":["\n/**\n * Module dependencies.\n */\n\nconst _ = require('lodash');\nconst methods = require('../methods');\n\n/**\n * Map all methods to lowercase.\n */\n\nconst lowercaseMethods = _.mapKeys(methods, (value, key) => key.toLowerCase());\n\n/**\n * Helper.\n */\n\nconst isJSON = data => {\n  try {\n    JSON.parse(data);\n\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Obfuscate the response body.\n */\n\nfunction obfuscateResponseBody(body, method) {\n  const fn = _.get(lowercaseMethods[method], 'obfuscate.response');\n\n  if (!fn || _.isEmpty(body.result)) {\n    return body;\n  }\n\n  return _.defaults({ result: fn(body.result) }, body);\n}\n\n/**\n * Obfuscate the response.\n */\n\nfunction obfuscateResponse(request, instance) {\n  if (request.type !== 'response') {\n    return;\n  }\n\n  if (!request.body) {\n    return;\n  }\n\n  if (_.get(request, `headers['content-type']`) === 'application/octet-stream') {\n    request.body = '******';\n\n    return;\n  }\n\n  if (!instance.body) {\n    return;\n  }\n\n  if (!isJSON(request.body)) {\n    return;\n  }\n\n  request.body = JSON.parse(request.body);\n\n  const requestBody = JSON.parse(instance.body);\n\n  if (Array.isArray(request.body)) {\n    const methodsById = _.mapKeys(requestBody, method => method.id);\n\n    request.body = _.map(request.body, request => obfuscateResponseBody(request, methodsById[request.id].method));\n  } else {\n    request.body = obfuscateResponseBody(request.body, requestBody.method);\n  }\n\n  request.body = JSON.stringify(request.body);\n}\n\n/**\n * Obfuscate the request body.\n */\n\nfunction obfuscateRequestBody(body) {\n  const method = _.get(lowercaseMethods[body.method], 'obfuscate.request');\n\n  if (!method) {\n    return body;\n  }\n\n  if (_.isPlainObject(body.params)) {\n    return _.assign(body, { params: method.named(body.params) });\n  }\n\n  return _.assign(body, { params: method.default(body.params) });\n}\n\n/**\n * Obfuscate the request.\n */\n\nfunction obfuscateRequest(request) {\n  if (request.type !== 'request') {\n    return;\n  }\n\n  if (!_.isString(request.body)) {\n    return;\n  }\n\n  request.body = JSON.parse(request.body);\n\n  if (Array.isArray(request.body)) {\n    request.body = _.map(request.body, obfuscateRequestBody);\n  } else {\n    request.body = obfuscateRequestBody(request.body);\n  }\n\n  request.body = JSON.stringify(request.body);\n}\n\n/**\n * Obfuscate headers.\n */\n\nfunction obfuscateHeaders(request) {\n  if (request.type !== 'request') {\n    return;\n  }\n\n  if (!_.has(request, 'headers.authorization')) {\n    return;\n  }\n\n  request.headers.authorization = request.headers.authorization.replace(/(Basic )(.*)/, `$1******`);\n}\n\n/**\n * Export `RequestObfuscator`.\n */\n\nmodule.exports = {\n  obfuscate: (request, instance) => {\n    obfuscateHeaders(request);\n    obfuscateRequest(request);\n    obfuscateResponse(request, instance);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}